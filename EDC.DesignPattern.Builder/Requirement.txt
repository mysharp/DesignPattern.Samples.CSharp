M公司游戏开发部想要开发一款名为Manulife群侠传的网络游戏，该游戏采用主流的RPG（角色扮演游戏）模式，玩家可以在游戏中扮演各种特定的角色，而各个角色又可以根据不同的游戏情节和统计数据（如力量、魔法、技能等）具有不同的能力，角色也会随着不断升级而拥有更加强大的能力。

作为RPG游戏的一个重要组成部分，需要对游戏角色进行设计，而且随着该游戏的升级将不断增加新的角色。不同类型的游戏角色，其性别、脸型、服装、发型等外部特性都有所差异，例如“天使”拥有美丽的面容和披肩的长发，并身穿一袭白裙；而“恶魔”则极其丑陋，留着光头并穿着一件刺眼的黑衣。

M公司决定开发一个小工具来创建游戏角色，可以创建不同类型的角色并可以灵活地增加新角色。分析发现，游戏角色是一个复杂对象，它包含性别、脸型等多个组成部分，不同的游戏角色其组成部分有所差异。无论是何种造型的游戏角色，其创建步骤都大同小异，都需要逐步创建其组成部分，再将各组成部分装配成个一个完整的游戏角色。如何一步一步地创建一个包含多个组成部分的复杂对象，建造者模式为解决此类问题而诞生




建造者模式与抽象工厂模式有点相似，但是建造者模式返回一个完整的复杂产品，而抽象工厂模式则返回一系列相关的产品。如果将抽象工厂模式看成一个汽车配件生产厂，生成不同类型的汽车配件，那么建造者模式则是一个汽车组装厂，通过对配件进行组成返回一辆完整的汽车。





主要优点
　　客户端不需要知道产品内部的组成细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象。

　　具体建造者相对独立，增加新的具体建造者无需修改原有类库的代码，系统扩展比较方便，符合开闭原则。

　　可以更加精细地控制产品的创建过程 -> 将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建过程。

主要缺点
　　对于所创建的产品有一定限制：一般这些产品都具有一些较多的共同点，其组成部分相似。如果差异性很大，那么则不适合使用建造者模式。

　　如果产品的内部结构复杂多变，可能会需要定义很多具体构建者来实现这些变化，会导致系统变得庞大，增加系统的理解难度和运行成本。

应用场景
	需要生成的产品对象由复杂的内部结构，这些产品对象通常包含多个成员变量。

　　需要生成的产品对象的属性相互依赖，需要指定其生成顺序。

　　隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的产品。