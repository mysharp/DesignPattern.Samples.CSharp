M公司开发部基于OO技术开发了一套图形界面构件库Visual Component，该构件库提供了大量的基本构件，如窗体、文本框、列表框等等，由于在使用该构件库时，用户经常要求定制一些特殊的显示效果，例如带滚动条的窗体，带黑色边框的文本框，即带滚动条又带黑色边框的列表框等，因此经常需要对该构件库进行扩展以增强其功能，如何提高图形界面构件库的可扩展性并降低其维护成本是M公司开发部的程序猿们必须要面对的一个问题。





主要优点
　　对于扩展一个对象的功能，装饰模式比继承更加灵活 => 不会导致类的个数急剧增加！

　　可以对一个对象进行多次装饰，从而创造出很多不同行为的组合 => 得到功能更为强大的对象！

　　具体构件类与具体装饰类可以独立变化，可以根据需要增加新的具体构建和具体装饰 => 原有代码无需修改，符合开放封闭原则！

主要缺点
　　虽然装饰模式拱了一种比继承更加灵活机动的方案，但同时也意味着比继承更加易于出错，排错也很困难。特别是经过多次装饰的对象，调试时寻找错误可能需要逐级排查，较为繁琐。

应用场景
　　在不影响其他对象的情况下，想要动态地、透明地给单个对象添加职责 => 采用装饰模式吧！

　　当不能采用继承的方式对系统进行扩展 或 采取继承不利于系统扩展和维护时 => 采用装饰模式吧！