M公司在很久以前曾经开发了一个算法库，里面包含了一些常用的算法，例如排序和查找算法，在进行各类软件开发时经常需要重用该算法库中的算法。在为某学校开发教务管理系统时，开发人员发现需要对学生成绩进行排序和查找。该系统的设计人员已经开发了一个成绩操作接口IScoreOperation，在该接口中声明了排序方法Sort(int[])和查找方法Search(int[],int)。为了提高排序和查找的效率，开发人员决定重用算法库中的快速排序算法类QuickSort和二分查找算法类BinarySearch。但是，由于某些原因，现在M公司开发人员已经找不到该算法库的源代码，无法直接通过复制合粘贴操作来重用其中的代码；部分开发人员已经针对IScoreOperation接口编写代码，如果这时再要求对该接口修改或者要求大家直接使用QuickSort类和BinarySearch类将会导致大量代码需要修改。

因此，M公司开发人员面对这个没有远吗的算法库，遇到了一个幸福而又烦恼的问题：如何在既不修改现有接口又不需要任何算法库代码的基础上实现算法库的重用？


主要优点
　　将目标类和适配者类解耦，从而无须修改原有结构（只需新增一个适配器类）

　　增加了类的透明性（适配者类中的业务实现过程）和复用性（同一个适配者类可以在多个不同的系统中复用）

　　灵活性和可扩展性很好（借助配置文件和反射机制，可以方便地切换适配器，符合开闭原则）

应用场景
　　系统需要使用一些现有的类，而这些类的接口（例如方法名）不符合系统的需要，甚至没有这些类的源码。

　　想要创建一个可以复用的类，用于一些彼此之间没有太大关联的类，包括一些可能在将来引进的类一起工作。